package disgord

// Code generated - This file has been automatically generated by generate/events/main.go - DO NOT EDIT.
// Warning: This file is overwritten at "go generate", instead adapt reactor.go and event/events.go and run `go generate`

import (
	"github.com/andersfylling/disgord/internal/event"
)

//////////////////////////////////////////////////////
//
// Helper funcs
//
//////////////////////////////////////////////////////

func defineResource(evt string) (resource evtResource) {
	switch evt {

	case event.ChannelCreate:
		resource = &ChannelCreate{}
	case event.ChannelDelete:
		resource = &ChannelDelete{}
	case event.ChannelPinsUpdate:
		resource = &ChannelPinsUpdate{}
	case event.ChannelUpdate:
		resource = &ChannelUpdate{}
	case event.GuildBanAdd:
		resource = &GuildBanAdd{}
	case event.GuildBanRemove:
		resource = &GuildBanRemove{}
	case event.GuildCreate:
		resource = &GuildCreate{}
	case event.GuildDelete:
		resource = &GuildDelete{}
	case event.GuildEmojisUpdate:
		resource = &GuildEmojisUpdate{}
	case event.GuildIntegrationsUpdate:
		resource = &GuildIntegrationsUpdate{}
	case event.GuildMemberAdd:
		resource = &GuildMemberAdd{}
	case event.GuildMemberRemove:
		resource = &GuildMemberRemove{}
	case event.GuildMemberUpdate:
		resource = &GuildMemberUpdate{}
	case event.GuildMembersChunk:
		resource = &GuildMembersChunk{}
	case event.GuildRoleCreate:
		resource = &GuildRoleCreate{}
	case event.GuildRoleDelete:
		resource = &GuildRoleDelete{}
	case event.GuildRoleUpdate:
		resource = &GuildRoleUpdate{}
	case event.GuildUpdate:
		resource = &GuildUpdate{}
	case event.InviteCreate:
		resource = &InviteCreate{}
	case event.InviteDelete:
		resource = &InviteDelete{}
	case event.MessageCreate:
		resource = &MessageCreate{}
	case event.MessageDelete:
		resource = &MessageDelete{}
	case event.MessageDeleteBulk:
		resource = &MessageDeleteBulk{}
	case event.MessageReactionAdd:
		resource = &MessageReactionAdd{}
	case event.MessageReactionRemove:
		resource = &MessageReactionRemove{}
	case event.MessageReactionRemoveAll:
		resource = &MessageReactionRemoveAll{}
	case event.MessageReactionRemoveEmoji:
		resource = &MessageReactionRemoveEmoji{}
	case event.MessageUpdate:
		resource = &MessageUpdate{}
	case event.PresenceUpdate:
		resource = &PresenceUpdate{}
	case event.Ready:
		resource = &Ready{}
	case event.Resumed:
		resource = &Resumed{}
	case event.TypingStart:
		resource = &TypingStart{}
	case event.UserUpdate:
		resource = &UserUpdate{}
	case event.VoiceServerUpdate:
		resource = &VoiceServerUpdate{}
	case event.VoiceStateUpdate:
		resource = &VoiceStateUpdate{}
	case event.WebhooksUpdate:
		resource = &WebhooksUpdate{}
	}

	return resource
}

func isHandler(h Handler) (ok bool) {
	switch h.(type) {
	case SimpleHandler:
		ok = true
	case SimplestHandler:
		ok = true
	case chan interface{}:
		ok = true
	case handlerChannelCreate:
		ok = true
	case chan *ChannelCreate:
		ok = true
	case handlerChannelDelete:
		ok = true
	case chan *ChannelDelete:
		ok = true
	case handlerChannelPinsUpdate:
		ok = true
	case chan *ChannelPinsUpdate:
		ok = true
	case handlerChannelUpdate:
		ok = true
	case chan *ChannelUpdate:
		ok = true
	case handlerGuildBanAdd:
		ok = true
	case chan *GuildBanAdd:
		ok = true
	case handlerGuildBanRemove:
		ok = true
	case chan *GuildBanRemove:
		ok = true
	case handlerGuildCreate:
		ok = true
	case chan *GuildCreate:
		ok = true
	case handlerGuildDelete:
		ok = true
	case chan *GuildDelete:
		ok = true
	case handlerGuildEmojisUpdate:
		ok = true
	case chan *GuildEmojisUpdate:
		ok = true
	case handlerGuildIntegrationsUpdate:
		ok = true
	case chan *GuildIntegrationsUpdate:
		ok = true
	case handlerGuildMemberAdd:
		ok = true
	case chan *GuildMemberAdd:
		ok = true
	case handlerGuildMemberRemove:
		ok = true
	case chan *GuildMemberRemove:
		ok = true
	case handlerGuildMemberUpdate:
		ok = true
	case chan *GuildMemberUpdate:
		ok = true
	case handlerGuildMembersChunk:
		ok = true
	case chan *GuildMembersChunk:
		ok = true
	case handlerGuildRoleCreate:
		ok = true
	case chan *GuildRoleCreate:
		ok = true
	case handlerGuildRoleDelete:
		ok = true
	case chan *GuildRoleDelete:
		ok = true
	case handlerGuildRoleUpdate:
		ok = true
	case chan *GuildRoleUpdate:
		ok = true
	case handlerGuildUpdate:
		ok = true
	case chan *GuildUpdate:
		ok = true
	case handlerInviteCreate:
		ok = true
	case chan *InviteCreate:
		ok = true
	case handlerInviteDelete:
		ok = true
	case chan *InviteDelete:
		ok = true
	case handlerMessageCreate:
		ok = true
	case chan *MessageCreate:
		ok = true
	case handlerMessageDelete:
		ok = true
	case chan *MessageDelete:
		ok = true
	case handlerMessageDeleteBulk:
		ok = true
	case chan *MessageDeleteBulk:
		ok = true
	case handlerMessageReactionAdd:
		ok = true
	case chan *MessageReactionAdd:
		ok = true
	case handlerMessageReactionRemove:
		ok = true
	case chan *MessageReactionRemove:
		ok = true
	case handlerMessageReactionRemoveAll:
		ok = true
	case chan *MessageReactionRemoveAll:
		ok = true
	case handlerMessageReactionRemoveEmoji:
		ok = true
	case chan *MessageReactionRemoveEmoji:
		ok = true
	case handlerMessageUpdate:
		ok = true
	case chan *MessageUpdate:
		ok = true
	case handlerPresenceUpdate:
		ok = true
	case chan *PresenceUpdate:
		ok = true
	case handlerReady:
		ok = true
	case chan *Ready:
		ok = true
	case handlerResumed:
		ok = true
	case chan *Resumed:
		ok = true
	case handlerTypingStart:
		ok = true
	case chan *TypingStart:
		ok = true
	case handlerUserUpdate:
		ok = true
	case chan *UserUpdate:
		ok = true
	case handlerVoiceServerUpdate:
		ok = true
	case chan *VoiceServerUpdate:
		ok = true
	case handlerVoiceStateUpdate:
		ok = true
	case chan *VoiceStateUpdate:
		ok = true
	case handlerWebhooksUpdate:
		ok = true
	case chan *WebhooksUpdate:
		ok = true
	}
	return ok
}

func closeChannel(channel interface{}) {
	switch t := channel.(type) {
	case chan interface{}:
		close(t)
	case chan *ChannelCreate:
		close(t)
	case chan *ChannelDelete:
		close(t)
	case chan *ChannelPinsUpdate:
		close(t)
	case chan *ChannelUpdate:
		close(t)
	case chan *GuildBanAdd:
		close(t)
	case chan *GuildBanRemove:
		close(t)
	case chan *GuildCreate:
		close(t)
	case chan *GuildDelete:
		close(t)
	case chan *GuildEmojisUpdate:
		close(t)
	case chan *GuildIntegrationsUpdate:
		close(t)
	case chan *GuildMemberAdd:
		close(t)
	case chan *GuildMemberRemove:
		close(t)
	case chan *GuildMemberUpdate:
		close(t)
	case chan *GuildMembersChunk:
		close(t)
	case chan *GuildRoleCreate:
		close(t)
	case chan *GuildRoleDelete:
		close(t)
	case chan *GuildRoleUpdate:
		close(t)
	case chan *GuildUpdate:
		close(t)
	case chan *InviteCreate:
		close(t)
	case chan *InviteDelete:
		close(t)
	case chan *MessageCreate:
		close(t)
	case chan *MessageDelete:
		close(t)
	case chan *MessageDeleteBulk:
		close(t)
	case chan *MessageReactionAdd:
		close(t)
	case chan *MessageReactionRemove:
		close(t)
	case chan *MessageReactionRemoveAll:
		close(t)
	case chan *MessageReactionRemoveEmoji:
		close(t)
	case chan *MessageUpdate:
		close(t)
	case chan *PresenceUpdate:
		close(t)
	case chan *Ready:
		close(t)
	case chan *Resumed:
		close(t)
	case chan *TypingStart:
		close(t)
	case chan *UserUpdate:
		close(t)
	case chan *VoiceServerUpdate:
		close(t)
	case chan *VoiceStateUpdate:
		close(t)
	case chan *WebhooksUpdate:
		close(t)
	}
}

//////////////////////////////////////////////////////
//
// Dispatcher: contructor + repetitive methods
//
//////////////////////////////////////////////////////

// newDispatcher construct a Dispatch object for reacting to web socket events
// from discord
func newDispatcher() *dispatcher {
	d := &dispatcher{
		handlerSpecs: make(map[string][]*handlerSpec),
		shutdown:     make(chan struct{}),
	}

	return d
}

func (d *dispatcher) trigger(h Handler, evt resource) {
	switch t := h.(type) {
	case SimpleHandler:
		t(d.session)
	case SimplestHandler:
		t()
	case chan interface{}:
		t <- evt
	case chan<- interface{}:
		t <- evt
	case handlerChannelCreate:
		t(d.session, evt.(*ChannelCreate))
	case chan *ChannelCreate:
		t <- evt.(*ChannelCreate)
	case chan<- *ChannelCreate:
		t <- evt.(*ChannelCreate)
	case handlerChannelDelete:
		t(d.session, evt.(*ChannelDelete))
	case chan *ChannelDelete:
		t <- evt.(*ChannelDelete)
	case chan<- *ChannelDelete:
		t <- evt.(*ChannelDelete)
	case handlerChannelPinsUpdate:
		t(d.session, evt.(*ChannelPinsUpdate))
	case chan *ChannelPinsUpdate:
		t <- evt.(*ChannelPinsUpdate)
	case chan<- *ChannelPinsUpdate:
		t <- evt.(*ChannelPinsUpdate)
	case handlerChannelUpdate:
		t(d.session, evt.(*ChannelUpdate))
	case chan *ChannelUpdate:
		t <- evt.(*ChannelUpdate)
	case chan<- *ChannelUpdate:
		t <- evt.(*ChannelUpdate)
	case handlerGuildBanAdd:
		t(d.session, evt.(*GuildBanAdd))
	case chan *GuildBanAdd:
		t <- evt.(*GuildBanAdd)
	case chan<- *GuildBanAdd:
		t <- evt.(*GuildBanAdd)
	case handlerGuildBanRemove:
		t(d.session, evt.(*GuildBanRemove))
	case chan *GuildBanRemove:
		t <- evt.(*GuildBanRemove)
	case chan<- *GuildBanRemove:
		t <- evt.(*GuildBanRemove)
	case handlerGuildCreate:
		t(d.session, evt.(*GuildCreate))
	case chan *GuildCreate:
		t <- evt.(*GuildCreate)
	case chan<- *GuildCreate:
		t <- evt.(*GuildCreate)
	case handlerGuildDelete:
		t(d.session, evt.(*GuildDelete))
	case chan *GuildDelete:
		t <- evt.(*GuildDelete)
	case chan<- *GuildDelete:
		t <- evt.(*GuildDelete)
	case handlerGuildEmojisUpdate:
		t(d.session, evt.(*GuildEmojisUpdate))
	case chan *GuildEmojisUpdate:
		t <- evt.(*GuildEmojisUpdate)
	case chan<- *GuildEmojisUpdate:
		t <- evt.(*GuildEmojisUpdate)
	case handlerGuildIntegrationsUpdate:
		t(d.session, evt.(*GuildIntegrationsUpdate))
	case chan *GuildIntegrationsUpdate:
		t <- evt.(*GuildIntegrationsUpdate)
	case chan<- *GuildIntegrationsUpdate:
		t <- evt.(*GuildIntegrationsUpdate)
	case handlerGuildMemberAdd:
		t(d.session, evt.(*GuildMemberAdd))
	case chan *GuildMemberAdd:
		t <- evt.(*GuildMemberAdd)
	case chan<- *GuildMemberAdd:
		t <- evt.(*GuildMemberAdd)
	case handlerGuildMemberRemove:
		t(d.session, evt.(*GuildMemberRemove))
	case chan *GuildMemberRemove:
		t <- evt.(*GuildMemberRemove)
	case chan<- *GuildMemberRemove:
		t <- evt.(*GuildMemberRemove)
	case handlerGuildMemberUpdate:
		t(d.session, evt.(*GuildMemberUpdate))
	case chan *GuildMemberUpdate:
		t <- evt.(*GuildMemberUpdate)
	case chan<- *GuildMemberUpdate:
		t <- evt.(*GuildMemberUpdate)
	case handlerGuildMembersChunk:
		t(d.session, evt.(*GuildMembersChunk))
	case chan *GuildMembersChunk:
		t <- evt.(*GuildMembersChunk)
	case chan<- *GuildMembersChunk:
		t <- evt.(*GuildMembersChunk)
	case handlerGuildRoleCreate:
		t(d.session, evt.(*GuildRoleCreate))
	case chan *GuildRoleCreate:
		t <- evt.(*GuildRoleCreate)
	case chan<- *GuildRoleCreate:
		t <- evt.(*GuildRoleCreate)
	case handlerGuildRoleDelete:
		t(d.session, evt.(*GuildRoleDelete))
	case chan *GuildRoleDelete:
		t <- evt.(*GuildRoleDelete)
	case chan<- *GuildRoleDelete:
		t <- evt.(*GuildRoleDelete)
	case handlerGuildRoleUpdate:
		t(d.session, evt.(*GuildRoleUpdate))
	case chan *GuildRoleUpdate:
		t <- evt.(*GuildRoleUpdate)
	case chan<- *GuildRoleUpdate:
		t <- evt.(*GuildRoleUpdate)
	case handlerGuildUpdate:
		t(d.session, evt.(*GuildUpdate))
	case chan *GuildUpdate:
		t <- evt.(*GuildUpdate)
	case chan<- *GuildUpdate:
		t <- evt.(*GuildUpdate)
	case handlerInviteCreate:
		t(d.session, evt.(*InviteCreate))
	case chan *InviteCreate:
		t <- evt.(*InviteCreate)
	case chan<- *InviteCreate:
		t <- evt.(*InviteCreate)
	case handlerInviteDelete:
		t(d.session, evt.(*InviteDelete))
	case chan *InviteDelete:
		t <- evt.(*InviteDelete)
	case chan<- *InviteDelete:
		t <- evt.(*InviteDelete)
	case handlerMessageCreate:
		t(d.session, evt.(*MessageCreate))
	case chan *MessageCreate:
		t <- evt.(*MessageCreate)
	case chan<- *MessageCreate:
		t <- evt.(*MessageCreate)
	case handlerMessageDelete:
		t(d.session, evt.(*MessageDelete))
	case chan *MessageDelete:
		t <- evt.(*MessageDelete)
	case chan<- *MessageDelete:
		t <- evt.(*MessageDelete)
	case handlerMessageDeleteBulk:
		t(d.session, evt.(*MessageDeleteBulk))
	case chan *MessageDeleteBulk:
		t <- evt.(*MessageDeleteBulk)
	case chan<- *MessageDeleteBulk:
		t <- evt.(*MessageDeleteBulk)
	case handlerMessageReactionAdd:
		t(d.session, evt.(*MessageReactionAdd))
	case chan *MessageReactionAdd:
		t <- evt.(*MessageReactionAdd)
	case chan<- *MessageReactionAdd:
		t <- evt.(*MessageReactionAdd)
	case handlerMessageReactionRemove:
		t(d.session, evt.(*MessageReactionRemove))
	case chan *MessageReactionRemove:
		t <- evt.(*MessageReactionRemove)
	case chan<- *MessageReactionRemove:
		t <- evt.(*MessageReactionRemove)
	case handlerMessageReactionRemoveAll:
		t(d.session, evt.(*MessageReactionRemoveAll))
	case chan *MessageReactionRemoveAll:
		t <- evt.(*MessageReactionRemoveAll)
	case chan<- *MessageReactionRemoveAll:
		t <- evt.(*MessageReactionRemoveAll)
	case handlerMessageReactionRemoveEmoji:
		t(d.session, evt.(*MessageReactionRemoveEmoji))
	case chan *MessageReactionRemoveEmoji:
		t <- evt.(*MessageReactionRemoveEmoji)
	case chan<- *MessageReactionRemoveEmoji:
		t <- evt.(*MessageReactionRemoveEmoji)
	case handlerMessageUpdate:
		t(d.session, evt.(*MessageUpdate))
	case chan *MessageUpdate:
		t <- evt.(*MessageUpdate)
	case chan<- *MessageUpdate:
		t <- evt.(*MessageUpdate)
	case handlerPresenceUpdate:
		t(d.session, evt.(*PresenceUpdate))
	case chan *PresenceUpdate:
		t <- evt.(*PresenceUpdate)
	case chan<- *PresenceUpdate:
		t <- evt.(*PresenceUpdate)
	case handlerReady:
		t(d.session, evt.(*Ready))
	case chan *Ready:
		t <- evt.(*Ready)
	case chan<- *Ready:
		t <- evt.(*Ready)
	case handlerResumed:
		t(d.session, evt.(*Resumed))
	case chan *Resumed:
		t <- evt.(*Resumed)
	case chan<- *Resumed:
		t <- evt.(*Resumed)
	case handlerTypingStart:
		t(d.session, evt.(*TypingStart))
	case chan *TypingStart:
		t <- evt.(*TypingStart)
	case chan<- *TypingStart:
		t <- evt.(*TypingStart)
	case handlerUserUpdate:
		t(d.session, evt.(*UserUpdate))
	case chan *UserUpdate:
		t <- evt.(*UserUpdate)
	case chan<- *UserUpdate:
		t <- evt.(*UserUpdate)
	case handlerVoiceServerUpdate:
		t(d.session, evt.(*VoiceServerUpdate))
	case chan *VoiceServerUpdate:
		t <- evt.(*VoiceServerUpdate)
	case chan<- *VoiceServerUpdate:
		t <- evt.(*VoiceServerUpdate)
	case handlerVoiceStateUpdate:
		t(d.session, evt.(*VoiceStateUpdate))
	case chan *VoiceStateUpdate:
		t <- evt.(*VoiceStateUpdate)
	case chan<- *VoiceStateUpdate:
		t <- evt.(*VoiceStateUpdate)
	case handlerWebhooksUpdate:
		t(d.session, evt.(*WebhooksUpdate))
	case chan *WebhooksUpdate:
		t <- evt.(*WebhooksUpdate)
	case chan<- *WebhooksUpdate:
		t <- evt.(*WebhooksUpdate)
	}
}
