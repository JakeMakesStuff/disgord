package disgord

// Code generated - This file has been automatically generated by generate/events/main.go - DO NOT EDIT.
// Warning: This file is overwritten at "go generate", instead adapt events.go and event/events.go and run go generate

import (
	"github.com/andersfylling/disgord/internal/event"
)

// helpers

func AllEvents() []string {
	return AllEventsExcept()
}

func AllEventsExcept(except ...string) []string {
	evtsMap := map[string]int8{
		event.ChannelCreate:              0,
		event.ChannelDelete:              0,
		event.ChannelPinsUpdate:          0,
		event.ChannelUpdate:              0,
		event.GuildBanAdd:                0,
		event.GuildBanRemove:             0,
		event.GuildCreate:                0,
		event.GuildDelete:                0,
		event.GuildEmojisUpdate:          0,
		event.GuildIntegrationsUpdate:    0,
		event.GuildMemberAdd:             0,
		event.GuildMemberRemove:          0,
		event.GuildMemberUpdate:          0,
		event.GuildMembersChunk:          0,
		event.GuildRoleCreate:            0,
		event.GuildRoleDelete:            0,
		event.GuildRoleUpdate:            0,
		event.GuildUpdate:                0,
		event.InviteCreate:               0,
		event.InviteDelete:               0,
		event.MessageCreate:              0,
		event.MessageDelete:              0,
		event.MessageDeleteBulk:          0,
		event.MessageReactionAdd:         0,
		event.MessageReactionRemove:      0,
		event.MessageReactionRemoveAll:   0,
		event.MessageReactionRemoveEmoji: 0,
		event.MessageUpdate:              0,
		event.PresenceUpdate:             0,
		event.Ready:                      0,
		event.Resumed:                    0,
		event.TypingStart:                0,
		event.UserUpdate:                 0,
		event.VoiceServerUpdate:          0,
		event.VoiceStateUpdate:           0,
		event.WebhooksUpdate:             0,
	}

	for i := range except {
		delete(evtsMap, except[i])
	}

	evts := make([]string, 0, len(evtsMap))
	for k := range evtsMap {
		evts = append(evts, k)
	}
	return evts
}

// ---------------------------

// EvtChannelCreate Sent when a new channel is created, relevant to the current user. The inner payload is a DM channel or
// guild channel object.
//
//const EvtChannelCreate = event.ChannelCreate

func (h *ChannelCreate) setShardID(id uint) { h.ShardID = id }

type handlerChannelCreate = func(Session, *ChannelCreate)

// ---------------------------

// EvtChannelDelete Sent when a channel relevant to the current user is deleted. The inner payload is a DM or Guild channel object.
//
//const EvtChannelDelete = event.ChannelDelete

func (h *ChannelDelete) setShardID(id uint) { h.ShardID = id }

type handlerChannelDelete = func(Session, *ChannelDelete)

// ---------------------------

// EvtChannelPinsUpdate Sent when a message is pinned or unpinned in a text channel. This is not sent when a pinned message is deleted.
//  Fields:
//  - ChannelID int64 or Snowflake
//  - LastPinTimestamp time.Now().UTC().Format(time.RFC3339)
// TODO fix.
//
//const EvtChannelPinsUpdate = event.ChannelPinsUpdate

func (h *ChannelPinsUpdate) setShardID(id uint) { h.ShardID = id }

type handlerChannelPinsUpdate = func(Session, *ChannelPinsUpdate)

// ---------------------------

// EvtChannelUpdate Sent when a channel is updated. The inner payload is a guild channel object.
//
//const EvtChannelUpdate = event.ChannelUpdate

func (h *ChannelUpdate) setShardID(id uint) { h.ShardID = id }

type handlerChannelUpdate = func(Session, *ChannelUpdate)

// ---------------------------

// EvtGuildBanAdd Sent when a user is banned from a guild. The inner payload is a user object, with an extra guild_id key.
//
//const EvtGuildBanAdd = event.GuildBanAdd

func (h *GuildBanAdd) setShardID(id uint) { h.ShardID = id }

type handlerGuildBanAdd = func(Session, *GuildBanAdd)

// ---------------------------

// EvtGuildBanRemove Sent when a user is unbanned from a guild. The inner payload is a user object, with an extra guild_id key.
//
//const EvtGuildBanRemove = event.GuildBanRemove

func (h *GuildBanRemove) setShardID(id uint) { h.ShardID = id }

type handlerGuildBanRemove = func(Session, *GuildBanRemove)

// ---------------------------

// EvtGuildCreate This event can be sent in three different scenarios:
//  1. When a user is initially connecting, to lazily load and backfill information for all unavailable guilds
//     sent in the Ready event.
// 	2. When a Guild becomes available again to the client.
// 	3. When the current user joins a new Guild.
//
//const EvtGuildCreate = event.GuildCreate

func (h *GuildCreate) setShardID(id uint) { h.ShardID = id }

type handlerGuildCreate = func(Session, *GuildCreate)

// ---------------------------

// EvtGuildDelete Sent when a guild becomes unavailable during a guild outage, or when the user leaves or is removed from a guild.
// The inner payload is an unavailable guild object. If the unavailable field is not set, the user was removed
// from the guild.
//
//const EvtGuildDelete = event.GuildDelete

func (h *GuildDelete) setShardID(id uint) { h.ShardID = id }

type handlerGuildDelete = func(Session, *GuildDelete)

// ---------------------------

// EvtGuildEmojisUpdate Sent when a guild's emojis have been updated.
//  Fields:
//  - GuildID Snowflake
//  - Emojis []*Emoji
//
//const EvtGuildEmojisUpdate = event.GuildEmojisUpdate

func (h *GuildEmojisUpdate) setShardID(id uint) { h.ShardID = id }

type handlerGuildEmojisUpdate = func(Session, *GuildEmojisUpdate)

// ---------------------------

// EvtGuildIntegrationsUpdate Sent when a guild integration is updated.
//  Fields:
//  - GuildID Snowflake
//
//const EvtGuildIntegrationsUpdate = event.GuildIntegrationsUpdate

func (h *GuildIntegrationsUpdate) setShardID(id uint) { h.ShardID = id }

type handlerGuildIntegrationsUpdate = func(Session, *GuildIntegrationsUpdate)

// ---------------------------

// EvtGuildMemberAdd Sent when a new user joins a guild. The inner payload is a guild member object with these extra fields:
//  - GuildID Snowflake
//
//  Fields:
//  - Member *Member
//
//const EvtGuildMemberAdd = event.GuildMemberAdd

func (h *GuildMemberAdd) setShardID(id uint) { h.ShardID = id }

type handlerGuildMemberAdd = func(Session, *GuildMemberAdd)

// ---------------------------

// EvtGuildMemberRemove Sent when a user is removed from a guild (leave/kick/ban).
//  Fields:
//  - GuildID   Snowflake
//  - User      *User
//
//const EvtGuildMemberRemove = event.GuildMemberRemove

func (h *GuildMemberRemove) setShardID(id uint) { h.ShardID = id }

type handlerGuildMemberRemove = func(Session, *GuildMemberRemove)

// ---------------------------

// EvtGuildMemberUpdate Sent when a guild member is updated.
//  Fields:
//  - GuildID   Snowflake
//  - Roles     []Snowflake
//  - User      *User
//  - Nick      string
//
//const EvtGuildMemberUpdate = event.GuildMemberUpdate

func (h *GuildMemberUpdate) setShardID(id uint) { h.ShardID = id }

type handlerGuildMemberUpdate = func(Session, *GuildMemberUpdate)

// ---------------------------

// EvtGuildMembersChunk Sent in response to Gateway Request Guild Members.
//  Fields:
//  - GuildID Snowflake
//  - Members []*Member
//
//const EvtGuildMembersChunk = event.GuildMembersChunk

func (h *GuildMembersChunk) setShardID(id uint) { h.ShardID = id }

type handlerGuildMembersChunk = func(Session, *GuildMembersChunk)

// ---------------------------

// EvtGuildRoleCreate Sent when a guild role is created.
//  Fields:
//  - GuildID   Snowflake
//  - Role      *Role
//
//const EvtGuildRoleCreate = event.GuildRoleCreate

func (h *GuildRoleCreate) setShardID(id uint) { h.ShardID = id }

type handlerGuildRoleCreate = func(Session, *GuildRoleCreate)

// ---------------------------

// EvtGuildRoleDelete Sent when a guild role is created.
//  Fields:
//  - GuildID Snowflake
//  - RoleID  Snowflake
//
//const EvtGuildRoleDelete = event.GuildRoleDelete

func (h *GuildRoleDelete) setShardID(id uint) { h.ShardID = id }

type handlerGuildRoleDelete = func(Session, *GuildRoleDelete)

// ---------------------------

// EvtGuildRoleUpdate Sent when a guild role is created.
//  Fields:
//  - GuildID Snowflake
//  - Role    *Role
//
//const EvtGuildRoleUpdate = event.GuildRoleUpdate

func (h *GuildRoleUpdate) setShardID(id uint) { h.ShardID = id }

type handlerGuildRoleUpdate = func(Session, *GuildRoleUpdate)

// ---------------------------

// EvtGuildUpdate Sent when a guild is updated. The inner payload is a guild object.
//
//const EvtGuildUpdate = event.GuildUpdate

func (h *GuildUpdate) setShardID(id uint) { h.ShardID = id }

type handlerGuildUpdate = func(Session, *GuildUpdate)

// ---------------------------

// EvtInviteCreate Sent when a guild's invite is created.
//  Fields:
//  - Code String
//  - GuildID   Snowflake
//  - ChannelID Snowflake
//  - Inviter *User
//  - Inviter *User
//  - Target *User
//  - TargetType int
//  - CreatedAt Time
//  - MaxAge int
//  - MaxUses int
//  - Temporary bool
//  - Uses int
//  - Revoked bool
//  - Unique bool
//  - ApproximatePresenceCount int
//  - ApproximateMemberCount int
//
//const EvtInviteCreate = event.InviteCreate

func (h *InviteCreate) setShardID(id uint) { h.ShardID = id }

type handlerInviteCreate = func(Session, *InviteCreate)

// ---------------------------

// EvtInviteDelete Sent when an invite is deleted.
//
//const EvtInviteDelete = event.InviteDelete

func (h *InviteDelete) setShardID(id uint) { h.ShardID = id }

type handlerInviteDelete = func(Session, *InviteDelete)

// ---------------------------

// EvtMessageCreate Sent when a message is created. The inner payload is a message object.
//
//const EvtMessageCreate = event.MessageCreate

func (h *MessageCreate) setShardID(id uint) { h.ShardID = id }

type handlerMessageCreate = func(Session, *MessageCreate)

// ---------------------------

// EvtMessageDelete Sent when a message is deleted.
//  Fields:
//  - ID        Snowflake
//  - ChannelID Snowflake
//
//const EvtMessageDelete = event.MessageDelete

func (h *MessageDelete) setShardID(id uint) { h.ShardID = id }

type handlerMessageDelete = func(Session, *MessageDelete)

// ---------------------------

// EvtMessageDeleteBulk Sent when multiple messages are deleted at once.
//  Fields:
//  - IDs       []Snowflake
//  - ChannelID Snowflake
//
//const EvtMessageDeleteBulk = event.MessageDeleteBulk

func (h *MessageDeleteBulk) setShardID(id uint) { h.ShardID = id }

type handlerMessageDeleteBulk = func(Session, *MessageDeleteBulk)

// ---------------------------

// EvtMessageReactionAdd Sent when a user adds a reaction to a message.
//  Fields:
//  - UserID     Snowflake
//  - ChannelID  Snowflake
//  - MessageID  Snowflake
//  - Emoji      *Emoji
//
//const EvtMessageReactionAdd = event.MessageReactionAdd

func (h *MessageReactionAdd) setShardID(id uint) { h.ShardID = id }

type handlerMessageReactionAdd = func(Session, *MessageReactionAdd)

// ---------------------------

// EvtMessageReactionRemove Sent when a user removes a reaction from a message.
//  Fields:
//  - UserID     Snowflake
//  - ChannelID  Snowflake
//  - MessageID  Snowflake
//  - Emoji      *Emoji
//
//const EvtMessageReactionRemove = event.MessageReactionRemove

func (h *MessageReactionRemove) setShardID(id uint) { h.ShardID = id }

type handlerMessageReactionRemove = func(Session, *MessageReactionRemove)

// ---------------------------

// EvtMessageReactionRemoveAll Sent when a user explicitly removes all reactions from a message.
//  Fields:
//  - ChannelID Snowflake
//  - MessageID Snowflake
//
//const EvtMessageReactionRemoveAll = event.MessageReactionRemoveAll

func (h *MessageReactionRemoveAll) setShardID(id uint) { h.ShardID = id }

type handlerMessageReactionRemoveAll = func(Session, *MessageReactionRemoveAll)

// ---------------------------

// EvtMessageReactionRemoveEmoji Sent when a bot removes all instances of a given emoji from the reactions of a message.
//
//const EvtMessageReactionRemoveEmoji = event.MessageReactionRemoveEmoji

func (h *MessageReactionRemoveEmoji) setShardID(id uint) { h.ShardID = id }

type handlerMessageReactionRemoveEmoji = func(Session, *MessageReactionRemoveEmoji)

// ---------------------------

// EvtMessageUpdate Sent when a message is updated. The inner payload is a message object.
//
// NOTE! Has _at_least_ the GuildID and ChannelID fields.
//
//const EvtMessageUpdate = event.MessageUpdate

func (h *MessageUpdate) setShardID(id uint) { h.ShardID = id }

type handlerMessageUpdate = func(Session, *MessageUpdate)

// ---------------------------

// EvtPresenceUpdate A user's presence is their current state on a guild. This event is sent when a user's presence is updated for a guild.
//  Fields:
//  - User    *User
//  - Roles   []Snowflake
//  - Game    *Activity
//  - GuildID Snowflake
//  - Status  string
//
//const EvtPresenceUpdate = event.PresenceUpdate

func (h *PresenceUpdate) setShardID(id uint) { h.ShardID = id }

type handlerPresenceUpdate = func(Session, *PresenceUpdate)

// ---------------------------

// EvtReady The ready event is dispatched when a client has completed the initial handshake with the gateway (for new sessions).
// // The ready event can be the largest and most complex event the gateway will send, as it contains all the state
// // required for a client to begin interacting with the rest of the platform.
// //  Fields:
// //  - V int
// //  - User *User
// //  - PrivateChannels []*Channel
// //  - Guilds []*GuildUnavailable
// //  - SessionID string
// //  - Trace []string
//
//const EvtReady = event.Ready

func (h *Ready) setShardID(id uint) { h.ShardID = id }

type handlerReady = func(Session, *Ready)

// ---------------------------

// EvtResumed The resumed event is dispatched when a client has sent a resume payload to the gateway
// (for resuming existing sessions).
//  Fields:
//  - Trace []string
//
//const EvtResumed = event.Resumed

func (h *Resumed) setShardID(id uint) { h.ShardID = id }

type handlerResumed = func(Session, *Resumed)

// ---------------------------

// EvtTypingStart Sent when a user starts typing in a channel.
//  Fields:
//  - ChannelID     Snowflake
//  - UserID        Snowflake
//  - TimestampUnix int
//
//const EvtTypingStart = event.TypingStart

func (h *TypingStart) setShardID(id uint) { h.ShardID = id }

type handlerTypingStart = func(Session, *TypingStart)

// ---------------------------

// EvtUserUpdate Sent when properties about the user change. Inner payload is a user object.
//
//const EvtUserUpdate = event.UserUpdate

func (h *UserUpdate) setShardID(id uint) { h.ShardID = id }

type handlerUserUpdate = func(Session, *UserUpdate)

// ---------------------------

// EvtVoiceServerUpdate Sent when a guild's voice server is updated. This is sent when initially connecting to voice, and when the current
// voice instance fails over to a new server.
//  Fields:
//  - Token     string
//  - ChannelID Snowflake
//  - Endpoint  string
//
//const EvtVoiceServerUpdate = event.VoiceServerUpdate

func (h *VoiceServerUpdate) setShardID(id uint) { h.ShardID = id }

type handlerVoiceServerUpdate = func(Session, *VoiceServerUpdate)

// ---------------------------

// EvtVoiceStateUpdate Sent when someone joins/leaves/moves voice channels. Inner payload is a voice state object.
//
//const EvtVoiceStateUpdate = event.VoiceStateUpdate

func (h *VoiceStateUpdate) setShardID(id uint) { h.ShardID = id }

type handlerVoiceStateUpdate = func(Session, *VoiceStateUpdate)

// ---------------------------

// EvtWebhooksUpdate Sent when a guild channel's WebHook is created, updated, or deleted.
//  Fields:
//  - GuildID   Snowflake
//  - ChannelID Snowflake
//
//const EvtWebhooksUpdate = event.WebhooksUpdate

func (h *WebhooksUpdate) setShardID(id uint) { h.ShardID = id }

type handlerWebhooksUpdate = func(Session, *WebhooksUpdate)

// ---------------------------

type dispatchRegistrater interface {
	register(evt string, inputs ...interface{}) error
}

type socketHandlerRegister struct {
	evtName     string
	middlewares []Middleware
	handlers    []Handler
	ctrl        HandlerCtrl

	reactor dispatchRegistrater
}

func (shr *socketHandlerRegister) build() {
	inputs := make([]interface{}, 0, len(shr.middlewares)+len(shr.handlers)+1)
	for _, mdlw := range shr.middlewares {
		inputs = append(inputs, mdlw)
	}
	for _, handler := range shr.handlers {
		inputs = append(inputs, handler)
	}
	if shr.ctrl != nil {
		inputs = append(inputs, shr.ctrl)
	}

	if err := shr.reactor.register(shr.evtName, inputs...); err != nil {
		panic(err)
	}
}

func (shr socketHandlerRegister) WithCtrl(ctrl HandlerCtrl) SocketHandlerRegistrator {
	if shr.ctrl != nil {
		panic("a controller was already registered for this handler specification")
	}
	shr.ctrl = ctrl
	return shr
}

func (shr socketHandlerRegister) WithMiddleware(first Middleware, extra ...Middleware) SocketHandlerRegistrator {
	shr.middlewares = append(shr.middlewares, first)
	shr.middlewares = append(shr.middlewares, extra...)
	return shr
}

func (shr socketHandlerRegister) ChannelCreate(handler handlerChannelCreate, moreHandlers ...handlerChannelCreate) {
	shr.evtName = event.ChannelCreate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) ChannelCreateChan(handler chan *ChannelCreate, moreHandlers ...chan *ChannelCreate) {
	shr.evtName = event.ChannelCreate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) ChannelDelete(handler handlerChannelDelete, moreHandlers ...handlerChannelDelete) {
	shr.evtName = event.ChannelDelete
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) ChannelDeleteChan(handler chan *ChannelDelete, moreHandlers ...chan *ChannelDelete) {
	shr.evtName = event.ChannelDelete
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) ChannelPinsUpdate(handler handlerChannelPinsUpdate, moreHandlers ...handlerChannelPinsUpdate) {
	shr.evtName = event.ChannelPinsUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) ChannelPinsUpdateChan(handler chan *ChannelPinsUpdate, moreHandlers ...chan *ChannelPinsUpdate) {
	shr.evtName = event.ChannelPinsUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) ChannelUpdate(handler handlerChannelUpdate, moreHandlers ...handlerChannelUpdate) {
	shr.evtName = event.ChannelUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) ChannelUpdateChan(handler chan *ChannelUpdate, moreHandlers ...chan *ChannelUpdate) {
	shr.evtName = event.ChannelUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildBanAdd(handler handlerGuildBanAdd, moreHandlers ...handlerGuildBanAdd) {
	shr.evtName = event.GuildBanAdd
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildBanAddChan(handler chan *GuildBanAdd, moreHandlers ...chan *GuildBanAdd) {
	shr.evtName = event.GuildBanAdd
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildBanRemove(handler handlerGuildBanRemove, moreHandlers ...handlerGuildBanRemove) {
	shr.evtName = event.GuildBanRemove
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildBanRemoveChan(handler chan *GuildBanRemove, moreHandlers ...chan *GuildBanRemove) {
	shr.evtName = event.GuildBanRemove
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildCreate(handler handlerGuildCreate, moreHandlers ...handlerGuildCreate) {
	shr.evtName = event.GuildCreate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildCreateChan(handler chan *GuildCreate, moreHandlers ...chan *GuildCreate) {
	shr.evtName = event.GuildCreate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildDelete(handler handlerGuildDelete, moreHandlers ...handlerGuildDelete) {
	shr.evtName = event.GuildDelete
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildDeleteChan(handler chan *GuildDelete, moreHandlers ...chan *GuildDelete) {
	shr.evtName = event.GuildDelete
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildEmojisUpdate(handler handlerGuildEmojisUpdate, moreHandlers ...handlerGuildEmojisUpdate) {
	shr.evtName = event.GuildEmojisUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildEmojisUpdateChan(handler chan *GuildEmojisUpdate, moreHandlers ...chan *GuildEmojisUpdate) {
	shr.evtName = event.GuildEmojisUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildIntegrationsUpdate(handler handlerGuildIntegrationsUpdate, moreHandlers ...handlerGuildIntegrationsUpdate) {
	shr.evtName = event.GuildIntegrationsUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildIntegrationsUpdateChan(handler chan *GuildIntegrationsUpdate, moreHandlers ...chan *GuildIntegrationsUpdate) {
	shr.evtName = event.GuildIntegrationsUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildMemberAdd(handler handlerGuildMemberAdd, moreHandlers ...handlerGuildMemberAdd) {
	shr.evtName = event.GuildMemberAdd
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildMemberAddChan(handler chan *GuildMemberAdd, moreHandlers ...chan *GuildMemberAdd) {
	shr.evtName = event.GuildMemberAdd
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildMemberRemove(handler handlerGuildMemberRemove, moreHandlers ...handlerGuildMemberRemove) {
	shr.evtName = event.GuildMemberRemove
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildMemberRemoveChan(handler chan *GuildMemberRemove, moreHandlers ...chan *GuildMemberRemove) {
	shr.evtName = event.GuildMemberRemove
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildMemberUpdate(handler handlerGuildMemberUpdate, moreHandlers ...handlerGuildMemberUpdate) {
	shr.evtName = event.GuildMemberUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildMemberUpdateChan(handler chan *GuildMemberUpdate, moreHandlers ...chan *GuildMemberUpdate) {
	shr.evtName = event.GuildMemberUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildMembersChunk(handler handlerGuildMembersChunk, moreHandlers ...handlerGuildMembersChunk) {
	shr.evtName = event.GuildMembersChunk
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildMembersChunkChan(handler chan *GuildMembersChunk, moreHandlers ...chan *GuildMembersChunk) {
	shr.evtName = event.GuildMembersChunk
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildRoleCreate(handler handlerGuildRoleCreate, moreHandlers ...handlerGuildRoleCreate) {
	shr.evtName = event.GuildRoleCreate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildRoleCreateChan(handler chan *GuildRoleCreate, moreHandlers ...chan *GuildRoleCreate) {
	shr.evtName = event.GuildRoleCreate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildRoleDelete(handler handlerGuildRoleDelete, moreHandlers ...handlerGuildRoleDelete) {
	shr.evtName = event.GuildRoleDelete
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildRoleDeleteChan(handler chan *GuildRoleDelete, moreHandlers ...chan *GuildRoleDelete) {
	shr.evtName = event.GuildRoleDelete
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildRoleUpdate(handler handlerGuildRoleUpdate, moreHandlers ...handlerGuildRoleUpdate) {
	shr.evtName = event.GuildRoleUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildRoleUpdateChan(handler chan *GuildRoleUpdate, moreHandlers ...chan *GuildRoleUpdate) {
	shr.evtName = event.GuildRoleUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildUpdate(handler handlerGuildUpdate, moreHandlers ...handlerGuildUpdate) {
	shr.evtName = event.GuildUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) GuildUpdateChan(handler chan *GuildUpdate, moreHandlers ...chan *GuildUpdate) {
	shr.evtName = event.GuildUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) InviteCreate(handler handlerInviteCreate, moreHandlers ...handlerInviteCreate) {
	shr.evtName = event.InviteCreate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) InviteCreateChan(handler chan *InviteCreate, moreHandlers ...chan *InviteCreate) {
	shr.evtName = event.InviteCreate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) InviteDelete(handler handlerInviteDelete, moreHandlers ...handlerInviteDelete) {
	shr.evtName = event.InviteDelete
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) InviteDeleteChan(handler chan *InviteDelete, moreHandlers ...chan *InviteDelete) {
	shr.evtName = event.InviteDelete
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageCreate(handler handlerMessageCreate, moreHandlers ...handlerMessageCreate) {
	shr.evtName = event.MessageCreate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageCreateChan(handler chan *MessageCreate, moreHandlers ...chan *MessageCreate) {
	shr.evtName = event.MessageCreate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageDelete(handler handlerMessageDelete, moreHandlers ...handlerMessageDelete) {
	shr.evtName = event.MessageDelete
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageDeleteChan(handler chan *MessageDelete, moreHandlers ...chan *MessageDelete) {
	shr.evtName = event.MessageDelete
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageDeleteBulk(handler handlerMessageDeleteBulk, moreHandlers ...handlerMessageDeleteBulk) {
	shr.evtName = event.MessageDeleteBulk
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageDeleteBulkChan(handler chan *MessageDeleteBulk, moreHandlers ...chan *MessageDeleteBulk) {
	shr.evtName = event.MessageDeleteBulk
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageReactionAdd(handler handlerMessageReactionAdd, moreHandlers ...handlerMessageReactionAdd) {
	shr.evtName = event.MessageReactionAdd
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageReactionAddChan(handler chan *MessageReactionAdd, moreHandlers ...chan *MessageReactionAdd) {
	shr.evtName = event.MessageReactionAdd
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageReactionRemove(handler handlerMessageReactionRemove, moreHandlers ...handlerMessageReactionRemove) {
	shr.evtName = event.MessageReactionRemove
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageReactionRemoveChan(handler chan *MessageReactionRemove, moreHandlers ...chan *MessageReactionRemove) {
	shr.evtName = event.MessageReactionRemove
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageReactionRemoveAll(handler handlerMessageReactionRemoveAll, moreHandlers ...handlerMessageReactionRemoveAll) {
	shr.evtName = event.MessageReactionRemoveAll
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageReactionRemoveAllChan(handler chan *MessageReactionRemoveAll, moreHandlers ...chan *MessageReactionRemoveAll) {
	shr.evtName = event.MessageReactionRemoveAll
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageReactionRemoveEmoji(handler handlerMessageReactionRemoveEmoji, moreHandlers ...handlerMessageReactionRemoveEmoji) {
	shr.evtName = event.MessageReactionRemoveEmoji
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageReactionRemoveEmojiChan(handler chan *MessageReactionRemoveEmoji, moreHandlers ...chan *MessageReactionRemoveEmoji) {
	shr.evtName = event.MessageReactionRemoveEmoji
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageUpdate(handler handlerMessageUpdate, moreHandlers ...handlerMessageUpdate) {
	shr.evtName = event.MessageUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) MessageUpdateChan(handler chan *MessageUpdate, moreHandlers ...chan *MessageUpdate) {
	shr.evtName = event.MessageUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) PresenceUpdate(handler handlerPresenceUpdate, moreHandlers ...handlerPresenceUpdate) {
	shr.evtName = event.PresenceUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) PresenceUpdateChan(handler chan *PresenceUpdate, moreHandlers ...chan *PresenceUpdate) {
	shr.evtName = event.PresenceUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) Ready(handler handlerReady, moreHandlers ...handlerReady) {
	shr.evtName = event.Ready
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) ReadyChan(handler chan *Ready, moreHandlers ...chan *Ready) {
	shr.evtName = event.Ready
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) Resumed(handler handlerResumed, moreHandlers ...handlerResumed) {
	shr.evtName = event.Resumed
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) ResumedChan(handler chan *Resumed, moreHandlers ...chan *Resumed) {
	shr.evtName = event.Resumed
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) TypingStart(handler handlerTypingStart, moreHandlers ...handlerTypingStart) {
	shr.evtName = event.TypingStart
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) TypingStartChan(handler chan *TypingStart, moreHandlers ...chan *TypingStart) {
	shr.evtName = event.TypingStart
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) UserUpdate(handler handlerUserUpdate, moreHandlers ...handlerUserUpdate) {
	shr.evtName = event.UserUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) UserUpdateChan(handler chan *UserUpdate, moreHandlers ...chan *UserUpdate) {
	shr.evtName = event.UserUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) VoiceServerUpdate(handler handlerVoiceServerUpdate, moreHandlers ...handlerVoiceServerUpdate) {
	shr.evtName = event.VoiceServerUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) VoiceServerUpdateChan(handler chan *VoiceServerUpdate, moreHandlers ...chan *VoiceServerUpdate) {
	shr.evtName = event.VoiceServerUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) VoiceStateUpdate(handler handlerVoiceStateUpdate, moreHandlers ...handlerVoiceStateUpdate) {
	shr.evtName = event.VoiceStateUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) VoiceStateUpdateChan(handler chan *VoiceStateUpdate, moreHandlers ...chan *VoiceStateUpdate) {
	shr.evtName = event.VoiceStateUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) WebhooksUpdate(handler handlerWebhooksUpdate, moreHandlers ...handlerWebhooksUpdate) {
	shr.evtName = event.WebhooksUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}
func (shr socketHandlerRegister) WebhooksUpdateChan(handler chan *WebhooksUpdate, moreHandlers ...chan *WebhooksUpdate) {
	shr.evtName = event.WebhooksUpdate
	shr.handlers = append(shr.handlers, handler)
	for _, h := range moreHandlers {
		shr.handlers = append(shr.handlers, h)
	}
	shr.build()
}

type SocketHandlerRegistrator interface {
	ChannelCreate(handler handlerChannelCreate, moreHandlers ...handlerChannelCreate)
	ChannelCreateChan(handler chan *ChannelCreate, moreHandlers ...chan *ChannelCreate)
	ChannelDelete(handler handlerChannelDelete, moreHandlers ...handlerChannelDelete)
	ChannelDeleteChan(handler chan *ChannelDelete, moreHandlers ...chan *ChannelDelete)
	ChannelPinsUpdate(handler handlerChannelPinsUpdate, moreHandlers ...handlerChannelPinsUpdate)
	ChannelPinsUpdateChan(handler chan *ChannelPinsUpdate, moreHandlers ...chan *ChannelPinsUpdate)
	ChannelUpdate(handler handlerChannelUpdate, moreHandlers ...handlerChannelUpdate)
	ChannelUpdateChan(handler chan *ChannelUpdate, moreHandlers ...chan *ChannelUpdate)
	GuildBanAdd(handler handlerGuildBanAdd, moreHandlers ...handlerGuildBanAdd)
	GuildBanAddChan(handler chan *GuildBanAdd, moreHandlers ...chan *GuildBanAdd)
	GuildBanRemove(handler handlerGuildBanRemove, moreHandlers ...handlerGuildBanRemove)
	GuildBanRemoveChan(handler chan *GuildBanRemove, moreHandlers ...chan *GuildBanRemove)
	GuildCreate(handler handlerGuildCreate, moreHandlers ...handlerGuildCreate)
	GuildCreateChan(handler chan *GuildCreate, moreHandlers ...chan *GuildCreate)
	GuildDelete(handler handlerGuildDelete, moreHandlers ...handlerGuildDelete)
	GuildDeleteChan(handler chan *GuildDelete, moreHandlers ...chan *GuildDelete)
	GuildEmojisUpdate(handler handlerGuildEmojisUpdate, moreHandlers ...handlerGuildEmojisUpdate)
	GuildEmojisUpdateChan(handler chan *GuildEmojisUpdate, moreHandlers ...chan *GuildEmojisUpdate)
	GuildIntegrationsUpdate(handler handlerGuildIntegrationsUpdate, moreHandlers ...handlerGuildIntegrationsUpdate)
	GuildIntegrationsUpdateChan(handler chan *GuildIntegrationsUpdate, moreHandlers ...chan *GuildIntegrationsUpdate)
	GuildMemberAdd(handler handlerGuildMemberAdd, moreHandlers ...handlerGuildMemberAdd)
	GuildMemberAddChan(handler chan *GuildMemberAdd, moreHandlers ...chan *GuildMemberAdd)
	GuildMemberRemove(handler handlerGuildMemberRemove, moreHandlers ...handlerGuildMemberRemove)
	GuildMemberRemoveChan(handler chan *GuildMemberRemove, moreHandlers ...chan *GuildMemberRemove)
	GuildMemberUpdate(handler handlerGuildMemberUpdate, moreHandlers ...handlerGuildMemberUpdate)
	GuildMemberUpdateChan(handler chan *GuildMemberUpdate, moreHandlers ...chan *GuildMemberUpdate)
	GuildMembersChunk(handler handlerGuildMembersChunk, moreHandlers ...handlerGuildMembersChunk)
	GuildMembersChunkChan(handler chan *GuildMembersChunk, moreHandlers ...chan *GuildMembersChunk)
	GuildRoleCreate(handler handlerGuildRoleCreate, moreHandlers ...handlerGuildRoleCreate)
	GuildRoleCreateChan(handler chan *GuildRoleCreate, moreHandlers ...chan *GuildRoleCreate)
	GuildRoleDelete(handler handlerGuildRoleDelete, moreHandlers ...handlerGuildRoleDelete)
	GuildRoleDeleteChan(handler chan *GuildRoleDelete, moreHandlers ...chan *GuildRoleDelete)
	GuildRoleUpdate(handler handlerGuildRoleUpdate, moreHandlers ...handlerGuildRoleUpdate)
	GuildRoleUpdateChan(handler chan *GuildRoleUpdate, moreHandlers ...chan *GuildRoleUpdate)
	GuildUpdate(handler handlerGuildUpdate, moreHandlers ...handlerGuildUpdate)
	GuildUpdateChan(handler chan *GuildUpdate, moreHandlers ...chan *GuildUpdate)
	InviteCreate(handler handlerInviteCreate, moreHandlers ...handlerInviteCreate)
	InviteCreateChan(handler chan *InviteCreate, moreHandlers ...chan *InviteCreate)
	InviteDelete(handler handlerInviteDelete, moreHandlers ...handlerInviteDelete)
	InviteDeleteChan(handler chan *InviteDelete, moreHandlers ...chan *InviteDelete)
	MessageCreate(handler handlerMessageCreate, moreHandlers ...handlerMessageCreate)
	MessageCreateChan(handler chan *MessageCreate, moreHandlers ...chan *MessageCreate)
	MessageDelete(handler handlerMessageDelete, moreHandlers ...handlerMessageDelete)
	MessageDeleteChan(handler chan *MessageDelete, moreHandlers ...chan *MessageDelete)
	MessageDeleteBulk(handler handlerMessageDeleteBulk, moreHandlers ...handlerMessageDeleteBulk)
	MessageDeleteBulkChan(handler chan *MessageDeleteBulk, moreHandlers ...chan *MessageDeleteBulk)
	MessageReactionAdd(handler handlerMessageReactionAdd, moreHandlers ...handlerMessageReactionAdd)
	MessageReactionAddChan(handler chan *MessageReactionAdd, moreHandlers ...chan *MessageReactionAdd)
	MessageReactionRemove(handler handlerMessageReactionRemove, moreHandlers ...handlerMessageReactionRemove)
	MessageReactionRemoveChan(handler chan *MessageReactionRemove, moreHandlers ...chan *MessageReactionRemove)
	MessageReactionRemoveAll(handler handlerMessageReactionRemoveAll, moreHandlers ...handlerMessageReactionRemoveAll)
	MessageReactionRemoveAllChan(handler chan *MessageReactionRemoveAll, moreHandlers ...chan *MessageReactionRemoveAll)
	MessageReactionRemoveEmoji(handler handlerMessageReactionRemoveEmoji, moreHandlers ...handlerMessageReactionRemoveEmoji)
	MessageReactionRemoveEmojiChan(handler chan *MessageReactionRemoveEmoji, moreHandlers ...chan *MessageReactionRemoveEmoji)
	MessageUpdate(handler handlerMessageUpdate, moreHandlers ...handlerMessageUpdate)
	MessageUpdateChan(handler chan *MessageUpdate, moreHandlers ...chan *MessageUpdate)
	PresenceUpdate(handler handlerPresenceUpdate, moreHandlers ...handlerPresenceUpdate)
	PresenceUpdateChan(handler chan *PresenceUpdate, moreHandlers ...chan *PresenceUpdate)
	Ready(handler handlerReady, moreHandlers ...handlerReady)
	ReadyChan(handler chan *Ready, moreHandlers ...chan *Ready)
	Resumed(handler handlerResumed, moreHandlers ...handlerResumed)
	ResumedChan(handler chan *Resumed, moreHandlers ...chan *Resumed)
	TypingStart(handler handlerTypingStart, moreHandlers ...handlerTypingStart)
	TypingStartChan(handler chan *TypingStart, moreHandlers ...chan *TypingStart)
	UserUpdate(handler handlerUserUpdate, moreHandlers ...handlerUserUpdate)
	UserUpdateChan(handler chan *UserUpdate, moreHandlers ...chan *UserUpdate)
	VoiceServerUpdate(handler handlerVoiceServerUpdate, moreHandlers ...handlerVoiceServerUpdate)
	VoiceServerUpdateChan(handler chan *VoiceServerUpdate, moreHandlers ...chan *VoiceServerUpdate)
	VoiceStateUpdate(handler handlerVoiceStateUpdate, moreHandlers ...handlerVoiceStateUpdate)
	VoiceStateUpdateChan(handler chan *VoiceStateUpdate, moreHandlers ...chan *VoiceStateUpdate)
	WebhooksUpdate(handler handlerWebhooksUpdate, moreHandlers ...handlerWebhooksUpdate)
	WebhooksUpdateChan(handler chan *WebhooksUpdate, moreHandlers ...chan *WebhooksUpdate)
	WithCtrl(HandlerCtrl) SocketHandlerRegistrator
	WithMiddleware(first Middleware, extra ...Middleware) SocketHandlerRegistrator
}
